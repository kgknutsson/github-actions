name: 'Apply Terraform configuration'
description: 'Create or update the Azure infrastructure using Terraform.'
inputs:
  client_id:
    description: 'Client id of the application used for OIDC login.'
    required: true
  subscription_id:
    description: 'Subscription id used for OIDC login.'
    required: true
  tenant_id:
    description: 'Tenant id used for OIDC login.'
    required: true
  tf_storage_account:
    description: 'Terraform Storage Account, stored in a secret on your GitHub repository.'
    required: true
  environment:
    description: 'The target environment being deployed.'
    required: true
  working-directory:
    description: 'Working directory where the terraform configuration can be found.'
    required: false
    default: 'terraform'
runs:
  using: "composite"
  steps:
    - name: Checkout code
      uses: actions/checkout@v4
    - name: Get application name from config
      id: getName
      uses: mikefarah/yq@v4
      with:
        cmd: yq '.global.name' '${{ inputs.working-directory }}/config.yml'
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ~1.8
        terraform_wrapper: false
    - name: Initialize Terraform
      env:
        ARM_CLIENT_ID: ${{ inputs.client_id }}
        ARM_SUBSCRIPTION_ID: ${{ inputs.subscription_id }}
        ARM_TENANT_ID: ${{ inputs.tenant_id }}
        ARM_USE_OIDC: true
        ARM_STORAGE_USE_AZUREAD: true
        TF_STORAGE_ACCOUNT: ${{ inputs.tf_storage_account }}
        APPLICATION: ${{ steps.getName.outputs.result }}
        ENVIRONMENT: ${{ inputs.environment }}
      run: |
        export TF_STORAGE_ACCOUNT_SUBSCRIPTION=$(echo $TF_STORAGE_ACCOUNT | jq -r .accountSubscription)
        export TF_STORAGE_ACCOUNT_RG=$(echo $TF_STORAGE_ACCOUNT | jq -r .accountRG)
        export TF_STORAGE_ACCOUNT_NAME=$(echo $TF_STORAGE_ACCOUNT | jq -r .accountName)
        terraform init \
        -input=false \
        -backend-config="subscription_id=$TF_STORAGE_ACCOUNT_SUBSCRIPTION" \
        -backend-config="resource_group_name=$TF_STORAGE_ACCOUNT_RG" \
        -backend-config="storage_account_name=$TF_STORAGE_ACCOUNT_NAME" \
        -backend-config="container_name=tfstate" \
        -backend-config="key=rg-$APPLICATION-$ENVIRONMENT.terraform.tfstate"
      shell: bash
      working-directory: '${{ github.workspace }}/${{ inputs.working-directory }}'
    - name: Apply Terraform
      env:
        ARM_CLIENT_ID: ${{ inputs.client_id }}
        ARM_SUBSCRIPTION_ID: ${{ inputs.subscription_id }}
        ARM_TENANT_ID: ${{ inputs.tenant_id }}
        ARM_USE_OIDC: true
        ARM_STORAGE_USE_AZUREAD: true
        TF_STORAGE_ACCOUNT: ${{ inputs.tf_storage_account }}
        APPLICATION: ${{ steps.getName.outputs.result }}
        ENVIRONMENT: ${{ inputs.environment }}
      run: |
        export TF_STORAGE_ACCOUNT_NAME=$(echo $TF_STORAGE_ACCOUNT | jq -r .accountName)
        terraform apply \
        -input=false \
        -auto-approve \
        -var="terraform_storage_account=$TF_STORAGE_ACCOUNT_NAME" \
        -var="environment=$ENVIRONMENT"
      shell: bash
      working-directory: '${{ github.workspace }}/${{ inputs.working-directory }}'
    - name: Get output data from Terraform
      env:
        ARM_CLIENT_ID: ${{ inputs.client_id }}
        ARM_SUBSCRIPTION_ID: ${{ inputs.subscription_id }}
        ARM_TENANT_ID: ${{ inputs.tenant_id }}
        ARM_USE_OIDC: true
        ARM_STORAGE_USE_AZUREAD: true
      run: |
        echo $(terraform output -json) > terraform-output.json
      working-directory: '${{ github.workspace }}/${{ inputs.working-directory }}'
      shell: bash
    - name: Save Terraform output data
      uses: actions/upload-artifact@v4
      with:
        name: terraform-output
        path: '${{ github.workspace }}/terraform/terraform-output.json'
        retention-days: 1
