name: 'Apply Terraform configuration'
description: 'Create or update the Azure infrastructure using Terraform.'
inputs:
  azure_credentials:
    description: 'Azure Credentials, stored in a secret on your GitHub repository.'
    required: true
  tf_storage_account:
    description: 'Terraform Storage Account, stored in a secret on your GitHub repository.'
    required: true
  application:
    description: 'The application being deployed.'
    required: true
  environment:
    description: 'The target environment being deployed.'
    required: true
runs:
  using: "composite"
  steps:
    - name: Checkout code
      uses: actions/checkout@v2
    - name: Set environment variables
      env:
        AZURE_CREDENTIALS: ${{ inputs.azure_credentials }}
        TF_STORAGE_ACCOUNT: ${{ inputs.tf_storage_account }}
      run: |
        echo "ARM_CLIENT_ID=$(echo $AZURE_CREDENTIALS | jq -r .clientId)" >> $GITHUB_ENV
        echo "ARM_SUBSCRIPTION_ID=$(echo $AZURE_CREDENTIALS | jq -r .subscriptionId)" >> $GITHUB_ENV
        echo "ARM_TENANT_ID=$(echo $AZURE_CREDENTIALS | jq -r .tenantId)" >> $GITHUB_ENV
        echo "TF_STORAGE_ACCOUNT_NAME=$(echo $TF_STORAGE_ACCOUNT | jq -r .accountName)" >> $GITHUB_ENV
      shell: bash
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        terraform_version: 1.1.x
        terraform_wrapper: false
    - name: Initialize Terraform
      env:
        AZURE_CREDENTIALS: ${{ inputs.azure_credentials }}
        TF_STORAGE_ACCOUNT: ${{ inputs.tf_storage_account }}
        APPLICATION: ${{ inputs.application }}
        ENVIRONMENT: ${{ inputs.environment }}
      run: |
        export ARM_CLIENT_SECRET=$(echo $AZURE_CREDENTIALS | jq -r .clientSecret)
        export TF_STORAGE_ACCOUNT_KEY=$(echo $TF_STORAGE_ACCOUNT | jq -r .accountKey)
        terraform init \
        -input=false \
        -backend-config="storage_account_name=$TF_STORAGE_ACCOUNT_NAME" \
        -backend-config="access_key=$TF_STORAGE_ACCOUNT_KEY" \
        -backend-config="container_name=tfstate" \
        -backend-config="key=rg-$APPLICATION-$ENVIRONMENT.terraform.tfstate"
      shell: bash
      working-directory: '${{ github.workspace }}/terraform'
    - name: Apply Terraform
      env:
        AZURE_CREDENTIALS: ${{ inputs.azure_credentials }}
        APPLICATION: ${{ inputs.application }}
        ENVIRONMENT: ${{ inputs.environment }}
      run: |
        export ARM_CLIENT_SECRET=$(echo $AZURE_CREDENTIALS | jq -r .clientSecret)
        terraform apply \
        -input=false \
        -auto-approve \
        -var="terraform_storage_account=$TF_STORAGE_ACCOUNT_NAME" \
        -var="environment=$ENVIRONMENT"
      shell: bash
      working-directory: '${{ github.workspace }}/terraform'
    - name: Get output data from Terraform
      env:
        AZURE_CREDENTIALS: ${{ inputs.azure_credentials }}
      run: |
        export ARM_CLIENT_SECRET=$(echo $AZURE_CREDENTIALS | jq -r .clientSecret)
        echo $(terraform output -json) > terraform-output.json
      working-directory: '${{ github.workspace }}/terraform'
      shell: bash
    - name: Save Terraform output data
      uses: actions/upload-artifact@v2
      with:
        name: terraform-output
        path: '${{ github.workspace }}/terraform/terraform-output.json'
        retention-days: 1
