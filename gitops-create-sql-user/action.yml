name: 'Create SQL user'
description: 'Create SQL user'
inputs:
  http_endpoint:
    description: 'The service endpoint responsible for handling the call.'
    required: true
  azure_credentials:
    description: 'Azure Credentials, stored in a secret on your GitHub repository.'
    required: true
runs:
  using: "composite"
  steps:
    - name: Download Terraform output data
      uses: actions/download-artifact@v2
      with:
        name: terraform-output
    - name: Set environment variables
      run: |
        echo "APPLICATION_CAF_NAME=$(cat terraform-output.json | jq -r .application_caf_name.value)" >> $GITHUB_ENV
        echo "SQL_SERVER_FQDN=$(cat terraform-output.json | jq -r .sql_server_fqdn.value)" >> $GITHUB_ENV
        echo "SQL_DATABASE_NAME=$(cat terraform-output.json | jq -r .sql_database_name.value)" >> $GITHUB_ENV
        echo "SQL_DATABASE_ROLE=$(cat terraform-output.json | jq -r .sql_database_role.value)" >> $GITHUB_ENV
      shell: bash
    - name: Login to Azure
      uses: azure/login@v1
      with:
        creds: ${{ inputs.azure_credentials }}
        enable-AzPSSession: true
    - name: Run Azure PowerShell script
      uses: azure/powershell@v1
      with:
        inlineScript: |
          $body = @{
            Server = '${{ env.SQL_SERVER_FQDN }}'
            Database = '${{ env.SQL_DATABASE_NAME }}'
            AccessToken = (Get-AzAccessToken -ResourceUrl 'https://database.windows.net').Token
            Variable = 'USER_NAME=${{ env.APPLICATION_CAF_NAME }} DB_ROLE=${{ env.SQL_DATABASE_ROLE }}'
          } | ConvertTo-Json

          Invoke-RestMethod -Method 'Post' -Uri '${{ inputs.http_endpoint }}' -Body $body
        azPSVersion: "latest"
